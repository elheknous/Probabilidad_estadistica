lambda = ceiling(mean(lambdas))
lambda
1 - dpois(5,6)
cajaSo2 = base_datos %>%
ggplot(aes(y=SO2)) +
geom_boxplot() +
coord_flip()
so2modificado = base_datos %>% filter(SO2 < 36) %>%
ggplot(aes(y=SO2)) +
geom_boxplot() +
coord_flip()
grid.arrange(cajaSo2,so2modificado)
base_datos = base_datos
datos_atipicos = base_datos %>% filter(SO2 > 36)
nrow(base_datos) - (nrow(base_datos) - nrow(datos_atipicos))
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
no2 = base_datos$NO2
no2modificado = (base_datos %>% filter(NO2 < 142))$NO2
no2 = no2modificado
fw <-fitdist(no2,"weibull")
fln<-fitdist(no2,"lnorm")
fg <-fitdist(no2,"gamma")
fn <-fitdist(no2,"norm")
fe <-fitdist(no2,"exp")
# fb <-fitdist(no2,"beta") no se mueve entre 0 y 1
plot.legend<-c("Weibull","LogNormal","Gamma","Normal","Exponencial")
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
gofstat(list(fg,fn,fln,fw))
ks.test(no2,"pweibull",shape=fw$estimate[1],scale=fw$estimate[2])
ks.test(no2,"pnorm",fn$estimate[1],fn$estimate[2])
SO2 = base_datos$SO2
fw <-fitdist(SO2,"weibull")
fln<-fitdist(SO2,"lnorm")
fg <-fitdist(SO2,"gamma")
fn <-fitdist(SO2,"norm")
fe <-fitdist(SO2,"exp")
plot.legend<-c("Weibull","LogNormal","Gamma","Normal","Exponencial")
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
gofstat(list(fg,fln,fw,fe))
sample.aux = cocaina$calidad %>% sample(n1,replace=F)
# ajuste de distribuciones y probabilidades
library(dplyr)   # manipulacion de datos
library(ggplot2) # visualizacion
library(readxl) # leer excel y escribir excel
library(moments) # asimetria y curtosis
library(tidyverse)
library(nortest)
library(gamlss)
library(gamlss.dist)
library(fitdistrplus)
paleta <- c("#FF5A5F", "#FFB400", "#007A87",
"#8CE071", "#7B0051", "#00D1C1", "#FFAA91", "#B4A76C",
"#9CA299", "#565A5C", "#00A04B", "#E54C20")
# caso continuo ----
#install.packages("ggvis")
# consideremos los siguientes datos de la libreria siguiente
#install.packages("ggvis")
library(ggvis)
cocaina = ggvis::cocaine %>% as_tibble()
cocaina
# cocaina / potencia ---- HISTOGRAMA
potencia = cocaina$potency
hist(potencia,col="grey100",breaks = 15,freq = F,ylim=c(0,0.03)) #NO ES NORMAL
lines(density(potencia), col = "grey40", lty="dotted",lwd=3)
boxplot(potencia,horizontal = T)
summary(potencia) #porcentaje
# transformaremos la variable a porcentaje % dado
# que la potencia se mide entre 0 y 100
coca_pot = potencia/100 #distribucion beta de 0 a 1
# se mantiene el grafico pues la transformacion no cambia los datos,
# solo los pasa a decimales en [0,1]
hist(coca_pot,col="grey100",breaks = 15,freq = F,ylim=c(0,3))
lines(density(coca_pot), col = "grey40", lty="dotted",lwd=3)
# probamos el ajuste con la libreria gamlss() y solo con distribuciones
# donde x esta entre 0 y 1
m1 = fitDist(coca_pot,
k=2,
type = "real0to1",
trace=FALSE,
try.gamlss = T)
m2 = fitDist(potencia,
k=2,
type = "realplus",
trace=FALSE,
try.gamlss = T)
m2$fits
m1$fits # revisamos los AIC entregados para las distribuciones ajustadas
mu = m1$mu
s = m1$sigma
a = mu*(1-s^2)/s^2
b = (1-mu)*(1-s^2)/s^2
a/(a+b)
# podemos ver que la que mejor ajusta en este caso es la distribucion Beta,
# por lo que usaremos esa a ver si es buen ajuste
fitbeta <- fitdist(coca_pot,"beta")
fitgamma <- fitdist(coca_pot,"gamma")
cdfcomp(list(fitbeta,fitgamma))
denscomp(list(fitbeta,fitgamma))
qqcomp(list(fitbeta,fitgamma))
ppcomp(list(fitbeta,fitgamma))
cbind(gofstat(fitbeta),gofstat(fitgamma))
gofstat(list(fitbeta,fitnn))
plotDist(dist="binom",size = n,prob =p)
library(fitdistrplus)
plotDist(dist="binom",size = n,prob =p)
library(mosaic)
plotDist(dist="binom",size = n,prob =p)
plotDist(dist="pois",size = n,prob =p)
plotDist(dist="pois",6)
plotDist(dist="binom",size = n,prob =p)
plotdist(dist="binom",size = 30,prob =p)
n1 = ceiling(dim(base_datosNO2)[1]*0.3)
base_datosNO2 = no2 %>%
mutate(NO2_estable = ifelse(NO2 <= 20,1,0))
library(dplyr)
library(ggplot2)
library(readxl)
library(moments)
library(tidyverse)
library(nortest)
library(gridExtra)
library(fitdistrplus)
base_datos <- read_excel("C:/Users/jose/Downloads/MATUS_TORO_JOSE (1).xlsx")
cajaNo2 = base_datos %>%
ggplot(aes(y=NO2)) +
geom_boxplot() +
coord_flip()
no2modificado = base_datos %>% filter(NO2 < 142) %>%
ggplot(aes(y=NO2)) +
geom_boxplot() +
coord_flip()
grid.arrange(cajaNo2,no2modificado)
datos_atipicos = base_datos %>% filter(NO2 > 142)
nrow(base_datos) - (nrow(base_datos) - nrow(datos_atipicos))
no2modificado = base_datos %>% filter(NO2 < 142)
no2 = no2modificado
base_datosNO2 = no2 %>%
mutate(NO2_alto = ifelse(NO2 >= 70,1,0))
probs = NULL
n1 = round(length(base_datosNO2$NO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosNO2$NO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
pbinom(10,30,p)
library(dplyr)
library(ggplot2)
library(readxl)
library(moments)
library(tidyverse)
library(nortest)
library(gridExtra)
library(fitdistrplus)
base_datos <- read_excel("C:/Users/jose/Downloads/MATUS_TORO_JOSE (1).xlsx")
cajaNo2 = base_datos %>%
ggplot(aes(y=NO2)) +
geom_boxplot() +
coord_flip()
no2modificado = base_datos %>% filter(NO2 < 142) %>%
ggplot(aes(y=NO2)) +
geom_boxplot() +
coord_flip()
grid.arrange(cajaNo2,no2modificado)
datos_atipicos = base_datos %>% filter(NO2 > 142)
nrow(base_datos) - (nrow(base_datos) - nrow(datos_atipicos))
no2modificado = base_datos %>% filter(NO2 < 142)
no2 = no2modificado
base_datosNO2 = no2 %>%
mutate(NO2_alto = ifelse(NO2 >= 70,1,0))
probs = NULL
n1 = round(length(base_datosNO2$NO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosNO2$NO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
pbinom(10,30,p)
n1 = ceiling(dim(base_datosNO2)[1]*0.3)
base_datosNO2 = no2 %>%
mutate(NO2_estable = ifelse(NO2 <= 20,1,0))
lambdas = NULL
for (i in 1:100) {
sample.aux = base_datosNO2 %>%  slice(sample(1:dim(base_datosNO2)[1],size=n1)) %>%
group_by(hour) %>% dplyr::summarise(tasa = sum(NO2_estable))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
view(base_datosNO2)
n1 = ceiling(dim(base_datosNO2)[1]*0.3)
base_datosNO2 = no2 %>%
mutate(NO2_estable = ifelse(NO2 <= 20,1,0))
lambdas = NULL
for (i in 1:100) {
sample.aux = base_datosNO2 %>%  slice(sample(1:dim(base_datosNO2)[1],size=n1)) %>%
group_by(hour) %>% dplyr::summarise(tasa = sum(NO2_estable))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
n1 = ceiling(dim(base_datosNO2)[1]*0.3)
base_datosNO2 = no2 %>%
mutate(NO2_estable = ifelse(NO2 <= 20,1,0))
lambdas = NULL
for (i in 1:100) {
sample.aux = base_datosNO2 %>%  slice(sample(1:dim(base_datosNO2)[1],size=n1)) %>%
group_by(hour) %>% dplyr::summarise(tasa = sum(NO2_estable))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
n1 = ceiling(dim(base_datosNO2)[1]*0.3)
base_datosNO2 = no2 %>%
mutate(NO2_estable = ifelse(NO2 <= 20,1,0))
lambdas = NULL
for (i in 1:100) {
sample.aux = base_datosNO2 %>%  slice(sample(1:dim(base_datosNO2)[1],size=n1)) %>%
group_by(hour) %>% dplyr::summarise(tasa = sum(NO2_estable))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
1 - dpois(5,2)
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
dnbinom(10,5,p)
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
base_datosSO2 = base_datos %>%
mutate(SO2_alto = ifelse(SO2 >= 20,1,0))
probs = NULL
n1 = round(length(base_datosSO2$SO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datosSO2$SO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
dnbinom(10,5,p)
