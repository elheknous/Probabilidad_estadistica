for (i in 1:100) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
view(base_datos)
mean(base_datos$TEMP)
p
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:100) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
mean(base_datos$TEMP)
length(temp)
length(base_datos$TEMP)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
mean(base_datos$TEMP)
plotDist(dist="binom",size = n,prob =p)
install.packages("mosaic")
library(mosaic)
plotDist(dist="binom",size = n,prob =p)
n =40
plotDist(dist="binom",size = n,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
cocaina = cocaina %>%
mutate(calidad = ifelse(potency>85,1,0))
install.packages("ggvis")
# ajuste de distribuciones y probabilidades
library(dplyr)   # manipulacion de datos
library(ggplot2) # visualizacion
library(readxl) # leer excel y escribir excel
library(moments) # asimetria y curtosis
library(tidyverse)
library(nortest)
library(gamlss)
library(gamlss.dist)
library(fitdistrplus)
paleta <- c("#FF5A5F", "#FFB400", "#007A87",
"#8CE071", "#7B0051", "#00D1C1", "#FFAA91", "#B4A76C",
"#9CA299", "#565A5C", "#00A04B", "#E54C20")
# caso continuo ----
#install.packages("ggvis")
# consideremos los siguientes datos de la libreria siguiente
#install.packages("ggvis")
library(ggvis)
cocaina = ggvis::cocaine %>% as_tibble()
cocaina
# cocaina / potencia ---- HISTOGRAMA
potencia = cocaina$potency
hist(potencia,col="grey100",breaks = 15,freq = F,ylim=c(0,0.03)) #NO ES NORMAL
lines(density(potencia), col = "grey40", lty="dotted",lwd=3)
boxplot(potencia,horizontal = T)
summary(potencia) #porcentaje
# transformaremos la variable a porcentaje % dado
# que la potencia se mide entre 0 y 100
coca_pot = potencia/100 #distribucion beta de 0 a 1
# se mantiene el grafico pues la transformacion no cambia los datos,
# solo los pasa a decimales en [0,1]
hist(coca_pot,col="grey100",breaks = 15,freq = F,ylim=c(0,3))
lines(density(coca_pot), col = "grey40", lty="dotted",lwd=3)
# probamos el ajuste con la libreria gamlss() y solo con distribuciones
# donde x esta entre 0 y 1
m1 = fitDist(coca_pot,
k=2,
type = "real0to1",
trace=FALSE,
try.gamlss = T)
m2 = fitDist(potencia,
k=2,
type = "realplus",
trace=FALSE,
try.gamlss = T)
m2$fits
m1$fits # revisamos los AIC entregados para las distribuciones ajustadas
mu = m1$mu
s = m1$sigma
a = mu*(1-s^2)/s^2
b = (1-mu)*(1-s^2)/s^2
a/(a+b)
# podemos ver que la que mejor ajusta en este caso es la distribucion Beta,
# por lo que usaremos esa a ver si es buen ajuste
fitbeta <- fitdist(coca_pot,"beta")
fitgamma <- fitdist(coca_pot,"gamma")
cdfcomp(list(fitbeta,fitgamma))
denscomp(list(fitbeta,fitgamma))
qqcomp(list(fitbeta,fitgamma))
ppcomp(list(fitbeta,fitgamma))
cbind(gofstat(fitbeta),gofstat(fitgamma))
gofstat(list(fitbeta,fitnn))
plotDist(dist="binom",size = n,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
cocaina = cocaina %>%
mutate(calidad = ifelse(potency>85,1,0))
cocaina
length(coca_pot)
probs = NULL
n1 = round(length(cocaina$calidad)*0.2,0)
for (i in 1:100) {
sample.aux = cocaina$calidad %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
n =40
plotDist(dist="binom",size = n,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
p
p = 16
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
p = 0.16
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
p = mean(probs)/100
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
library(dplyr)   # manipulacion de datos
library(ggplot2) # visualizacion
library(readxl) # leer excel y escribir excel
library(moments) # asimetria y curtosis
library(tidyverse)
library(nortest)
library(gamlss)
library(gamlss.dist)
library(fitdistrplus)
######################################
no2 = base_datos$NO2
no2modificado = (base_datos %>% filter(NO2 < 142))$NO2
no2 = no2modificado
fw <-fitdist(no2,"weibull")
fln<-fitdist(no2,"lnorm")
fg <-fitdist(no2,"gamma")
fn <-fitdist(no2,"norm")
fe <-fitdist(no2,"exp")
# fb <-fitdist(no2,"beta") no se mueve entre 0 y 1
plot.legend<-c("Weibull","LogNormal","Gamma","Normal","Exponencial")
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
#chao exponeencial
gofstat(list(fg,fn,fln,fw,fe))
ks.test(no2,"pgamma",fg$estimate[1],fg$estimate[2])
ks.test(no2,"pweibull",fw$estimate[1],fw$estimate[2]) #### PREGUNTAR PARAMETROS
###########################################################
# X : Nivel de temperatura
temp = base_datos$TEMP
summary(temp)
#fw <-fitdist(temp,"weibull")
#fln<-fitdist(temp,"lnorm")
fn <-fitdist(temp,"norm")
plot.legend<-c("Normal")
denscomp(list(fn), legendtext=plot.legend)
qqcomp(list(fn), legendtext=plot.legend)
cdfcomp(list(fn), legendtext=plot.legend)
ppcomp(list(fn), legendtext=plot.legend)
ks.test(no2,"pnorm",fn$estimate[1],fn$estimate[2])
#no tiene distribucion continua estudiada
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
no2 = base_datos$NO2
no2modificado = (base_datos %>% filter(NO2 < 142))$NO2
no2 = no2modificado
fw <-fitdist(no2,"weibull")
fln<-fitdist(no2,"lnorm")
fg <-fitdist(no2,"gamma")
fn <-fitdist(no2,"norm")
fe <-fitdist(no2,"exp")
# fb <-fitdist(no2,"beta") no se mueve entre 0 y 1
plot.legend<-c("Weibull","LogNormal","Gamma","Normal","Exponencial")
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ks.test(no2,"pnorm",fn$estimate[1],fn$estimate[2])
ks.test(no2,"pgamma",fg$estimate[1],fg$estimate[2])
0.03113 >  0.001663
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)/100 #DIVIDIR POR 100?
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
plotDist(dist="binom",size = 40,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
p
plotDist(dist="binom",size = n,prob =p)
p
plotDist(dist="binom",size = 40,prob =p)
p = mean(probs)
p
cocaina = cocaina %>%
mutate(calidad = ifelse(potency>85,1,0))
cocaina
length(coca_pot)
probs = NULL
n1 = round(length(cocaina$calidad)*0.2,0)
for (i in 1:100) {
sample.aux = cocaina$calidad %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
cocaina = cocaina %>%
mutate(calidad = ifelse(potency>85,1,0))
cocaina
length(coca_pot)
probs = NULL
n1 = round(length(cocaina$calidad)*0.2,0)
for (i in 1:100) {
sample.aux = cocaina$calidad %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
mean(cocaina$calidad)
# DEFINICION DE VARIABLE
# CALCULAMOS LAS PROBABILIDADES NECESARIAS
#con que probailidad voy a obtern entre 15 y 21 muestra de calidad alta
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
#install.packages("mosaic")
library(mosaic)
n =40
plotDist(dist="binom",size = n,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
plotDist(dist="binom",size = n,prob =p)
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)/100 #DIVIDIR POR 100?
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
plotDist(dist="binom",size = 40,prob =p)
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs) #DIVIDIR POR 100?
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
p = mean(probs)/100 #DIVIDIR POR 100?
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
plotDist(dist="binom",size = 40,prob =p)
sieta = read.csv("C:\Users\josem\Downloads\siesta")
sieta = read.csv("C:\Users\josem\Downloads\siesta")
library(readr)
siesta <- read_csv("C:/Users/josem/Downloads/siesta.csv")
View(siesta)
siesta
library(ggplot2)
ggplot(siesta,aes(sleep,wine))+
geom_point()
library(ggplot2)
ggplot(siesta,aes(wine,sleep))+
geom_point()
library(ggplot2)
ggplot(siesta,aes(wine,sleep))+
geom_point()+
geom_smooth(method = "lm",
formula = y ~ x, col = "red")
ggplot(siesta,aes(wine,sleep))+
geom_point()+
geom_smooth(method = "lm",
formula = y ~ x, col = "blue")
ggplot(siesta,aes(wine,sleep))+
geom_point()+
geom_smooth(method = "lm",
formula = y ~ x, col = "orange")
modelo1 = lm(sleep ~ wine,data = siesta)
summary(modelo1)
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs) #DIVIDIR POR 100?
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)/100 #DIVIDIR POR 100?
p
pbinom(20,size = 40,prob = p) -pbinom(15,size = 40,prob = p)
library(dplyr)   # manipulacion de datos
library(ggplot2) # visualizacion
library(readxl) # leer excel y escribir excel
library(moments) # asimetria y curtosis
library(tidyverse)
library(nortest)
library(gamlss)
library(gamlss.dist)
library(fitdistrplus)
######################################
no2 = base_datos$NO2
no2modificado = (base_datos %>% filter(NO2 < 142))$NO2
no2 = no2modificado
fw <-fitdist(no2,"weibull")
fln<-fitdist(no2,"lnorm")
fg <-fitdist(no2,"gamma")
fn <-fitdist(no2,"norm")
fe <-fitdist(no2,"exp")
# fb <-fitdist(no2,"beta") no se mueve entre 0 y 1
plot.legend<-c("Weibull","LogNormal","Gamma","Normal","Exponencial")
denscomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
qqcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
cdfcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
ppcomp(list(fw,fln,fg,fn,fe), legendtext=plot.legend)
fw
ks.test(no2,"pweibull",shape=fw$estimate[1],scale=fw$estimate[2]) #### PREGUNTAR PARAMETROS
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = temp %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
probs
TEMP
temp
base_datos = base_datos %>%
mutate(Temperatura_alta = ifelse(TEMP >= 25,1,0))
length(temp)
probs = NULL
n1 = round(length(base_datos$TEMP)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datos$Temperatura_alta %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
base_datos = base_datos %>%
mutate(NO2_alto = ifelse(NO2 >= 80,1,0))
probs = NULL
n1 = round(length(base_datos$NO2)*0.2,0)
for (i in 1:1000) {
sample.aux = base_datos$NO2_alto %>% sample(n1,replace=F)
probs = c(probs,mean(sample.aux))
}
p = mean(probs)
p
length(base_datos$NO2)*0.2
plotDist(dist="binom",size = 40,prob =p)
plotDist(dist="binom",size = n,prob =p,kind ="histogram")
mtcars
library(dplyr)
auto <- mtcars %>% mutate(calidad = ifelse(mpg>=19,1,0))
auto
n1 = ceiling(dim(auto)[1]*0.3)
n1
lambdas = NULL
for (i in 1:1000) {
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
n1 = round(length(base_datos$NO2)*0.2,0)
n1
mtcars
library(dplyr)
auto <- mtcars %>% mutate(calidad = ifelse(mpg>=19,1,0))
auto
n1 = ceiling(dim(auto)[1]*0.3)
n1
lambdas = NULL
for (i in 1:1000) {
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
lambda
mtcars
library(dplyr)
auto <- mtcars %>% mutate(calidad = ifelse(mpg>=19,1,0))
auto
n1 = ceiling(length(auto)*0.3)
n1
lambdas = NULL
for (i in 1:1000) {
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
lambda
lambda
dim(auto)[1]
View(auto)
length(auto)
length(auto[1])
lambdas = c(lambdas,tasa.aux)
lambdas
for (i in 1:1000) {
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
tasa.aux = mean(sample.aux$tasa)
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
n1 = ceiling(dim(auto)[1]*0.3)
n1
auto <- mtcars %>% mutate(calidad = ifelse(mpg>=19,1,0))
auto
n1 = ceiling(dim(auto)[1]*0.3)
n1
lambda = ceiling(mean(lambdas))
lambda = ceiling(mean(lambdas))
lambda
lambda
lambda
lambda
lambda
2+2
mtcars
mtcars
library(dplyr)
auto <- mtcars %>% mutate(calidad = ifelse(mpg>=19,1,0))
auto
n1 = ceiling(dim(auto)[1]*0.3)
n1
lambdas = NULL
for (i in 1:1000) {
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1)) %>%
group_by(cyl) %>% dplyr::summarise(tasa = sum(calidad))
tasa.aux = mean(sample.aux$tasa)
lambdas = c(lambdas,tasa.aux)
}
lambda = ceiling(mean(lambdas))
lambda
kjv
ef
wc
wf
we
ecw
c
w
cew
e
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1))
View(sample.aux)
View(sample.aux)
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1))
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1))
sample.aux = auto %>%  slice(sample(1:dim(auto)[1],size=n1))
View(sample.aux)
View(sample.aux)
